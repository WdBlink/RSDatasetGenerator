# RSDatasetGenerator Docker Compose配置
# 用于开发环境和生产环境的容器编排

version: '3.8'

services:
  # 主应用服务
  rsdg:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: rs-dataset-generator:latest
    container_name: rsdg-app
    restart: unless-stopped
    
    # 环境变量
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - GDAL_DATA=/usr/share/gdal
      - PROJ_LIB=/usr/share/proj
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - CACHE_SIZE=${CACHE_SIZE:-1000}
    
    # 卷挂载
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output:rw
      - ./cache:/app/cache:rw
      - ./logs:/app/logs:rw
      - ./config.yaml:/app/config.yaml:ro
    
    # 网络
    networks:
      - rsdg-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # 健康检查
    healthcheck:
      test: ["CMD", "python", "-c", "import src.rs_dataset_generator; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 依赖服务
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: rsdg-redis
    restart: unless-stopped
    
    # 配置
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    # 卷挂载
    volumes:
      - redis-data:/data
    
    # 网络
    networks:
      - rsdg-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL数据库服务（用于元数据存储）
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: rsdg-postgres
    restart: unless-stopped
    
    # 环境变量
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rsdg}
      - POSTGRES_USER=${POSTGRES_USER:-rsdg}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rsdg_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    # 卷挂载
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # 网络
    networks:
      - rsdg-network
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rsdg} -d ${POSTGRES_DB:-rsdg}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Nginx反向代理（如果有Web界面）
  nginx:
    image: nginx:alpine
    container_name: rsdg-nginx
    restart: unless-stopped
    
    # 端口映射
    ports:
      - "80:80"
      - "443:443"
    
    # 卷挂载
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./output:/usr/share/nginx/html/output:ro
    
    # 网络
    networks:
      - rsdg-network
    
    # 依赖服务
    depends_on:
      - rsdg
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: rsdg-prometheus
    restart: unless-stopped
    
    # 命令
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # 端口映射
    ports:
      - "9090:9090"
    
    # 卷挂载
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # 网络
    networks:
      - rsdg-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: rsdg-grafana
    restart: unless-stopped
    
    # 环境变量
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # 端口映射
    ports:
      - "3000:3000"
    
    # 卷挂载
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # 网络
    networks:
      - rsdg-network
    
    # 依赖服务
    depends_on:
      - prometheus
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# 网络定义
networks:
  rsdg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 卷定义
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# 注意：开发和生产环境的覆盖配置请参考以下独立文件：
# - docker-compose.dev.yml (开发环境)
# - docker-compose.prod.yml (生产环境)
# 
# 使用方法：
# 开发环境: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# 生产环境: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
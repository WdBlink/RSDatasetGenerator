name: CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# 环境变量
env:
  PYTHON_VERSION: '3.8'
  POETRY_VERSION: '1.6.1'

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy isort bandit safety
        
    - name: 代码格式检查 (Black)
      run: black --check --diff src/ tests/
      
    - name: 导入排序检查 (isort)
      run: isort --check-only --diff src/ tests/
      
    - name: 代码风格检查 (Flake8)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: 类型检查 (MyPy)
      run: mypy src/ --ignore-missing-imports
      
    - name: 安全检查 (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: 依赖安全检查 (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 单元测试
  test:
    name: 单元测试
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: 安装系统依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        
    - name: 安装系统依赖 (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gdal
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        
    - name: 运行测试
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: 上传覆盖率报告到Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 上传测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # 集成测试
  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
        
    - name: 运行集成测试
      run: |
        pytest tests/test_integration.py -v -m "not slow"
        
    - name: 运行性能测试
      run: |
        python benchmark.py --quick
        
    - name: 验证架构
      run: |
        python validate_architecture.py

  # 构建和打包
  build:
    name: 构建和打包
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装构建依赖
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
        
    - name: 构建包
      run: |
        python -m build
        
    - name: 检查包
      run: |
        twine check dist/*
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # 文档构建
  docs:
    name: 构建文档
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: 构建文档
      run: |
        cd docs
        make html
        
    - name: 上传文档
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: docs/_build/html/

  # 发布到PyPI
  publish:
    name: 发布到PyPI
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: 发布到PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Docker构建和推送
  docker:
    name: Docker构建
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: rsdatasetgenerator/rs-dataset-generator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 构建和推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署文档
  deploy-docs:
    name: 部署文档
    runs-on: ubuntu-latest
    needs: [docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载文档
      uses: actions/download-artifact@v3
      with:
        name: docs
        path: docs/_build/html/
        
    - name: 部署到GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html/

  # 通知
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build]
    if: always()
    
    steps:
    - name: 通知Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 通知邮件
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'CI/CD Pipeline Failed: ${{ github.repository }}'
        body: |
          CI/CD pipeline failed for repository ${{ github.repository }}
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}